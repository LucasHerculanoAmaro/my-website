{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  var _class;\n  class ThemeService {\n    constructor() {\n      this.themes = ['secondary', 'principal'];\n      this.currentThemeIndex = 0;\n      // Recupera o tema salvo no localStorage ao inicializar o serviço\n      const savedThemeIndex = localStorage.getItem('selectedThemeIndex');\n      this.currentThemeIndex = savedThemeIndex !== null ? parseInt(savedThemeIndex, 10) : 0;\n      console.log('Tema salvo:', this.themes[this.currentThemeIndex]);\n      this.applyTheme(this.currentThemeIndex);\n    }\n    // Aplica o tema atual\n    applyTheme(themeIndex) {\n      console.log('Aplicando tema:', this.themes[themeIndex]);\n      document.body.className = this.themes[themeIndex];\n      localStorage.setItem('selectedThemeIndex', themeIndex.toString());\n    }\n    // Alterna para o próximo tema\n    cycleThemes() {\n      this.currentThemeIndex = (this.currentThemeIndex + 1) % this.themes.length;\n      this.applyTheme(this.currentThemeIndex);\n    }\n    // Obtém o índice do tema atual\n    getCurrentThemeIndex() {\n      return this.currentThemeIndex;\n    }\n  }\n  _class = ThemeService;\n  _class.ɵfac = function ThemeService_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}